#include <stdio.h>
#include <stdlib.h>

// Doubly Linked List এর Node
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// নতুন Node তৈরি করার ফাংশন
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// কোন position-এ insert করার ফাংশন
void insertAtPosition(struct Node** head, int value, int position) {
    struct Node* newNode = createNode(value);

    // যদি position 1 হয়, অর্থাৎ প্রথমে insert করতে হবে
    if (position == 1) {
        newNode->next = *head;
        if (*head != NULL)
            (*head)->prev = newNode;
        *head = newNode;
        return;
    }

    struct Node* temp = *head;
    int count = 1;

    // position-1 পর্যন্ত চলে যাওয়া
    while (temp != NULL && count < position - 1) {
        temp = temp->next;
        count++;
    }

    // যদি position list এর চেয়ে বেশি হয়
    if (temp == NULL) {
        printf("Invalid position!\n");
        free(newNode);
        return;
    }

    newNode->next = temp->next;
    newNode->prev = temp;

    if (temp->next != NULL)
        temp->next->prev = newNode;

    temp->next = newNode;
}

// List print করার ফাংশন
void printList(struct Node* head) {
    struct Node* temp = head;
    printf("Doubly Linked List: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;
    int n, value, position;

    printf("কতগুলো node insert করতে চাও? ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Value for node %d: ", i + 1);
        scanf("%d", &value);
        printf("Position to insert: ");
        scanf("%d", &position);
        insertAtPosition(&head, value, position);
        printList(head);
    }

    return 0;
}
