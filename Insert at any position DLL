#include <stdio.h>
#include <stdlib.h>

// Doubly Linked List-এর Node
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// নতুন Node তৈরি করার ফাংশন
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// পজিশনে Node insert করার ফাংশন
struct Node* insertAtPosition(struct Node* head, int position, int value) {
    struct Node* newNode = createNode(value);

    // যদি position 1 হয় বা লিস্ট ফাঁকা হয়
    if (position == 1 || head == NULL) {
        newNode->next = head;
        if (head != NULL)
            head->prev = newNode;
        head = newNode;
        return head;
    }

    struct Node* temp = head;
    for (int i = 1; i < position - 1; i++) {
        if (temp->next == NULL) break; // যদি list এর শেষ আসে
        temp = temp->next;
    }

    newNode->next = temp->next;
    newNode->prev = temp;

    if (temp->next != NULL)
        temp->next->prev = newNode;

    temp->next = newNode;

    return head;
}

// Doubly Linked List print করার ফাংশন
void printList(struct Node* head) {
    struct Node* temp = head;
    printf("Doubly Linked List: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;
    int n, value, pos;

    printf("কতগুলো node insert করতে চাও? ");
    scanf("%d", &n);

    // প্রথম n node insert করা
    for (int i = 1; i <= n; i++) {
        printf("Enter value for node %d: ", i);
        scanf("%d", &value);
        head = insertAtPosition(head, i, value);
    }

    printf("\nCurrent Doubly Linked List: ");
    printList(head);

    // নতুন node insert করা
    printf("\nEnter position to insert a new node: ");
    scanf("%d", &pos);
    printf("Enter value for the new node: ");
    scanf("%d", &value);

    head = insertAtPosition(head, pos, value);

    printf("\nUpdated Doubly Linked List: ");
    printList(head);

    return 0;
}
