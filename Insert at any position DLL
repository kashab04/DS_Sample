// // #include <stdio.h>
// // #include <stdlib.h>

// // struct Node {
// //     int data;
// //     struct Node* next;
// // };

// // struct Node* insertAtEnd(struct Node* head, int value) {
// //     struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
// //     newNode->data = value;
// //     newNode->next = NULL;

// //     if (head == NULL) {
// //         head = newNode;
// //         return head;
// //     }

// //     struct Node* temp = head;
// //     while (temp->next != NULL) {
// //         temp = temp->next;
// //     }

// //     temp->next = newNode;
// //     return head;
// // }

// // void printList(struct Node* head) {
// //     struct Node* temp = head;
// //     while (temp != NULL) {
// //         printf("%d -> ", temp->data);
// //         temp = temp->next;
// //     }
// //     printf("NULL\n");
// // }

// // int main() {
// //     struct Node* head = NULL;
// //     int n, value;

// //     printf("How many nodes do you want to insert? ");
// //     scanf("%d", &n);

// //     for (int i = 1; i <= n; i++) {
// //         printf("Enter value for node %d: ", i);
// //         scanf("%d", &value);
// //         head = insertAtEnd(head, value);
// //     }

// //     printf("\nLinked List: ");
// //     printList(head);

// //     return 0;
// // }



// #include <stdio.h>
// #include <stdlib.h>

// struct node {
//     int data;
//     struct node *next;
//     struct node *prev;
// };

// struct node *head = NULL;

// void create() {
//     struct node *temp, *newnode;
//     int choice = 1;

//     while (choice) {
//         newnode = (struct node*)malloc(sizeof(struct node));

//         printf("Enter data: ");
//         scanf("%d", &newnode->data);

//         newnode->prev = 0;
//         newnode->next = 0;

//         if (head == 0) {
//             head = temp = newnode;
//         } else {
//             temp->next = newnode;
//             newnode->prev = temp;
//             temp = newnode;
//         }

//         printf("Do you want to continue (0/1)? ");
//         scanf("%d", &choice);
//     }
// }

// void display() {
//     struct node *temp = head;

//     printf("\nDoubly Linked List:\n");
//     while (temp != NULL) {
//         printf("%d <-> ", temp->data);
//         temp = temp->next;
//     }
//     printf("NULL\n");
// }

// int main() {
//     create();
//     display();
//     return 0;
// }




#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
    struct node *prev;
};

struct node *head = NULL;

// Create function (লিস্ট তৈরি)
void create() {
    struct node *temp, *newnode;
    int choice = 1;

    while (choice) {
        newnode = (struct node*)malloc(sizeof(struct node));

        printf("Enter data: ");
        scanf("%d", &newnode->data);

        newnode->next = NULL;
        newnode->prev = NULL;

        if (head == NULL) {
            head = temp = newnode;
        } else {
            temp->next = newnode;
            newnode->prev = temp;
            temp = newnode;
        }

        printf("Do you want to continue (0/1)? ");
        scanf("%d", &choice);
    }
}

// Insert at position
void insertAtPosition() {
    struct node *newnode, *temp;
    int pos, i = 1, count = 0;

    printf("\nEnter position to insert: ");
    scanf("%d", &pos);

    newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);

    newnode->next = NULL;
    newnode->prev = NULL;

    // Count total nodes
    temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }

    // 1️⃣ যদি পজিশন 1 হয় → শুরুতে ইনসার্ট
    if (pos == 1) {
        newnode->next = head;
        if (head != NULL)
            head->prev = newnode;
        head = newnode;
    }

    // 2️⃣ যদি মাঝখানে বা শেষে হয়
    else if (pos > 1 && pos <= count + 1) {
        temp = head;
        while (i < pos - 1) {
            temp = temp->next;
            i++;
        }
        newnode->next = temp->next;
        newnode->prev = temp;

        if (temp->next != NULL)
            temp->next->prev = newnode;

        temp->next = newnode;
    }

    // 3️⃣ যদি পজিশন invalid হয়
    else {
        printf("Invalid position!\n");
        free(newnode);
        return;
    }

    printf("Node inserted at position %d successfully!\n", pos);
}

// Display function
void display() {
    struct node *temp = head;

    printf("\nDoubly Linked List:\n");
    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    create();
    printf("\nOriginal list:\n");
    display();

    insertAtPosition();
    printf("\nAfter inserting at given position:\n");
    display();

    return 0;
}

